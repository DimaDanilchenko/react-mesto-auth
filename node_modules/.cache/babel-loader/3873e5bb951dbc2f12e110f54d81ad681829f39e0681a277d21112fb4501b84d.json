{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Загрузка информации о пользователе с сервера\n  getUserProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // Загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n  // Редактирование профиля\n  setUserProfile(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.popupName,\n        about: data.popupJob\n      })\n    }).then(this._handleResponse);\n  }\n  //Изменение аватарки\n  setUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._handleResponse);\n  }\n  //Добавление карточки\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._handleResponse);\n  }\n  // Удаление карточки\n  removeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._headers\n      }\n    }).then(this._handleResponse);\n  }\n\n  // Постановка лайка\n  addLikeCard(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._headers\n      }\n    }).then(this._handleResponse);\n  }\n  // Снятие лайка\n  removeLikeCard(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._headers\n      }\n    }).then(this._handleResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-39',\n  headers: {\n    authorization: '654b92bf-739a-4fff-ad65-57ae2eab02aa',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","_headers","_baseUrl","_handleResponse","res","ok","json","Promise","reject","status","getUserProfile","fetch","method","then","getInitialCards","setUserProfile","data","body","JSON","stringify","name","popupName","about","popupJob","setUserAvatar","avatar","addNewCard","authorization","link","removeCard","id","addLikeCard","removeLikeCard","api"],"sources":["/Users/dimad./Desktop/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._headers = headers\n    this._baseUrl = baseUrl\n  }\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Загрузка информации о пользователе с сервера\n  getUserProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    })\n      .then(this._handleResponse)\n  }\n\n\n  // Загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    })\n      .then(this._handleResponse)\n  }\n  // Редактирование профиля\n  setUserProfile(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.popupName,\n        about: data.popupJob\n      })\n    })\n      .then(this._handleResponse)\n  }\n  //Изменение аватарки\n  setUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      })\n    })\n      .then(this._handleResponse)\n  }\n  //Добавление карточки\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    })\n      .then(this._handleResponse)\n  }\n  // Удаление карточки\n  removeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._headers\n      }\n    })\n      .then(this._handleResponse)\n  }\n\n    // Постановка лайка\n    addLikeCard(id) {\n      return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n        method: 'PUT',\n        headers: {\n          authorization: this._headers\n        }\n      })\n      .then(this._handleResponse)\n    }\n    // Снятие лайка\n    removeLikeCard(id) {\n      return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this._headers\n        }\n      })\n      .then(this._handleResponse)\n    }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-39',\n  headers: {\n    authorization: '654b92bf-739a-4fff-ad65-57ae2eab02aa',\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}