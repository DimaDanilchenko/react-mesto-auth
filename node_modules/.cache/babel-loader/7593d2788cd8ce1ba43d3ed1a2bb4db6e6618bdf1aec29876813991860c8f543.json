{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  _request(url, options) {\n    return fetch(url, options).then(this._handleResponse);\n  }\n\n  // Загрузка информации о пользователе с сервера\n  getUserProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // Загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n  // Редактирование профиля\n  setUserProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._handleResponse);\n  }\n  //Изменение аватарки\n  setUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._handleResponse);\n  }\n  //Добавление карточки\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._handleResponse);\n  }\n  // Удаление карточки\n  removeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n  // Постановка лайка\n  addLikeCard(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n  // Снятие лайка\n  removeLikeCard(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\n  headers: {\n    authorization: 'b0a021b8-85d2-4df0-a58b-761352eca6a6',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","_headers","_baseUrl","_handleResponse","res","ok","json","Promise","reject","status","_request","url","options","fetch","then","getUserProfile","method","getInitialCards","setUserProfile","name","about","body","JSON","stringify","setUserAvatar","data","avatar","addNewCard","link","removeCard","id","addLikeCard","isLiked","removeLikeCard","api","authorization"],"sources":["/Users/dimad./Desktop/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._headers = headers\n    this._baseUrl = baseUrl\n  }\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  _request(url, options) {\n    return fetch(url, options).then(this._handleResponse)\n  }\n\n  // Загрузка информации о пользователе с сервера\n  getUserProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    })\n      .then(this._handleResponse)\n  }\n\n\n  // Загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    })\n      .then(this._handleResponse)\n  }\n  // Редактирование профиля\n  setUserProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    })\n      .then(this._handleResponse)\n  }\n  //Изменение аватарки\n  setUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      })\n    })\n      .then(this._handleResponse)\n  }\n  //Добавление карточки\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    })\n      .then(this._handleResponse)\n  }\n  // Удаление карточки\n  removeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(this._handleResponse)\n  }\n  // Постановка лайка\n  addLikeCard(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this._headers\n    })\n      .then(this._handleResponse)\n  }\n  // Снятие лайка\n  removeLikeCard(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(this._handleResponse)\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\n  headers: {\n    authorization: 'b0a021b8-85d2-4df0-a58b-761352eca6a6',\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}